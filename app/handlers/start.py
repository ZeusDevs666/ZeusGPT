from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from ..config import settings
from ..models import User

router = Router(name="start")


async def upsert_local_user(session: AsyncSession, m: Message) -> User:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –±–æ—Ç–∞"""
    is_premium = bool(getattr(m.from_user, "is_premium", False))

    # –∏—â–µ–º –ø–æ tg_user_id, –∞ –Ω–µ –ø–æ id
    u = await session.scalar(
        select(User).where(User.tg_user_id == m.from_user.id)
    )

    if u is None:
        u = User(
            tg_user_id=m.from_user.id,
            username=m.from_user.username,
            first_name=m.from_user.first_name,
            last_name=m.from_user.last_name,
            language_code=m.from_user.language_code,
            is_premium=is_premium,
        )
        session.add(u)
    else:
        u.username = m.from_user.username
        u.first_name = m.from_user.first_name
        u.last_name = m.from_user.last_name
        u.language_code = m.from_user.language_code
        u.is_premium = is_premium

    await session.commit()
    return u


@router.message(CommandStart())
@router.message(Command("menu"))
async def on_start(message: Message, session: AsyncSession, users_api):
    if settings.MAINTENANCE_MODE:
        await message.answer(settings.MAINTENANCE_MESSAGE)
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    u = await upsert_local_user(session, message)

    # —à–ª—ë–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try:
        await users_api.upsert_user(
            tg_user_id=message.from_user.id,
            bot_token=settings.BOT_TOKEN,  # ‚ö° –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            username=u.username,
            first_name=u.first_name,
            last_name=u.last_name,
            language_code=u.language_code,
            is_premium=u.is_premium,
        )
    except Exception as e:
        # –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ —Ä–æ–Ω—è–µ–º –±–æ—Ç–∞
        print(f"[users_api.upsert_user] –û—à–∏–±–∫–∞: {e}")

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—Å–µ–≥–¥–∞
    await message.answer(
        "<b>üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ ZeusGPT.</b>\n"
        "–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å! "
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –Ω–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
        "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å üëá",
    )