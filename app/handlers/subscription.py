# app/handlers/subscription.py
from __future__ import annotations
import contextlib
from aiogram import Router, F, types
from app.config import settings
from app.services.checker import SubscriptionChecker
from app.services.subscription import build_channels_kb

router = Router(name="subscription")
_checker = SubscriptionChecker()

@router.callback_query(F.data == "check_sub")
async def on_check_subscription(call: types.CallbackQuery):
    user_id = call.from_user.id
    required = getattr(settings, "required_channels", []) or []
    ok = await _checker.is_subscribed(user_id)

    if ok:
        # –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if call.message:
            await call.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
            await call.message.answer("<b>üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ ZeusGPT.</b> \n–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—à–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –Ω–æ —ç—Ç–æ –ø–æ–∫–∞.. \n\n  –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å üëá")
        with contextlib.suppress(Exception):
            await call.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ", show_alert=False)
        return

    # –≤—Å—ë –µ—â—ë –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    kb = build_channels_kb(required)
    if call.message:
        await call.message.edit_text(
            "üö´ –í—Å—ë –µ—â—ë –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=kb
        )
    with contextlib.suppress(Exception):
        await call.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòï", show_alert=False)