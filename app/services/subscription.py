# app/services/subscription.py
from __future__ import annotations

import contextlib
from typing import List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery

from app.config import settings
from app.services.checker import SubscriptionChecker


def build_channels_kb(channels: List[str]) -> InlineKeyboardMarkup:
    """
    –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
      - –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª: –∫–Ω–æ–ø–∫–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è @username);
        –¥–ª—è id (-100...) —Å—Å—ã–ª–∫—É –Ω–µ –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –±–µ–∑ –∏–Ω–≤–∞–π—Ç–∞, –ø–æ—ç—Ç–æ–º—É –∫–Ω–æ–ø–∫—É –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º.
      - –≤ –∫–æ–Ω—Ü–µ: –∫–Ω–æ–ø–∫–∞ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
    """
    rows: List[List[InlineKeyboardButton]] = []
    for ch in channels:
        ch = ch.strip()
        if not ch:
            continue
        if ch.startswith("@"):
            url = f"https://t.me/{ch.lstrip('@')}"
            rows.append([InlineKeyboardButton(text=f"üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ {ch}", url=url)])
        else:
            # id –∫–∞–Ω–∞–ª–∞ –±–µ–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ username ‚Äî —Å—Å—ã–ª–∫—É –Ω–µ —Å—Ç—Ä–æ–∏–º
            rows.append([InlineKeyboardButton(text=f"üì¢ –ö–∞–Ω–∞–ª {ch}", url="https://t.me")])  # –∑–∞–≥–ª—É—à–∫–∞
    rows.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


class SubscriptionMiddleware:
    """
    –ë–ª–æ–∫–∏—Ä—É–µ–º –ª—é–±—ã–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    def __init__(self, checker: SubscriptionChecker):
        self.checker = checker

    async def __call__(self, handler, event, data):
        user = getattr(event, "from_user", None)
        if user is None:
            return await handler(event, data)

        required = getattr(settings, "required_channels", []) or []
        if not required:
            # –Ω–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return await handler(event, data)

        is_ok = await self.checker.is_subscribed(user.id)  # <-- —Ç–æ–ª—å–∫–æ user.id
        if not is_ok:
            kb = build_channels_kb(required)
            text = (
                "üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n\n"
                "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª(—ã), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª üëá"
            )
            # –æ—Ç—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
            if isinstance(event, Message):
                await event.answer(text, reply_markup=kb)
            elif isinstance(event, CallbackQuery):
                # –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–ª–±–µ–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
                with contextlib.suppress(Exception):
                    await event.answer()
                if event.message:
                    await event.message.answer(text, reply_markup=kb)
            return  # –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É ‚Äî —Ö—ç–Ω–¥–ª–µ—Ä—ã –Ω–µ –≤—ã–∑–æ–≤—É—Ç—Å—è

        return await handler(event, data)